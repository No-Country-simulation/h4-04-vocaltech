// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * model User {
 * id             String          @id @default(uuid())
 * email          String          @unique
 * password       String
 * name           String
 * role           UserRole //@default(USER)
 * createdAt      DateTime        @default(now())
 * updatedAt      DateTime        @updatedAt
 * accounts       Account[]
 * sessions       Session[]
 * authenticators Authenticator[]
 * }
 */

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  name           String
  role           UserRole?       @default(USER)
  leadId         String? // Relación opcional con un lead
  organizationId String? // ID de la organización (opcional)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]

  @@index([leadId])
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  provider          String
  providerAccountId String  @unique
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  sessionToken String   @unique
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id                   String  @id @default(uuid())
  userId               String
  credentialID         String  @unique
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
